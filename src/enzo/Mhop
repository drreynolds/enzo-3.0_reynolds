#=======================================================================
#  MAKEFILE FOR ENZO-SVN
#  Robert Harkness, 13th May 2008
#=======================================================================

VERSION := "13th May 2008"
DATE := $(shell date)
CWD := $(shell pwd)

# In some pathological cases this may need to be set explicitly
# e.g. SYSTEM := BGL
SYSTEM := $(shell uname -s)
UNAMEM := $(shell uname -m)


#-----------------------------------------------------------------------
# ENZO_PPR is one of p4 (single), p8 (double) or p16 (quad) for
#          precision of position
# ENZO_XPR is r4 (32 bits) or r8 (64 bits) for float and real and must
#          MUST be <= precision of position
# FORTPR   defines how Fortran real precision is specified to the
#          compiler e.g. SGI -r8; IBM -qrealsize=8
# INIT_PPR is the precision of the data generated by inits
#          STRONG RECOMMENDATION: always use 64-bit inits
#          and always set INIT_PPR := INITS64
#
# The process of building ENZO executables can be controlled by setting
# the following environment variables:
#
# name       default     allowed values
# ENZO_PPR   p8          p4, p8, p16
# ENZO_XPR   r8          r4, r8
# INIT_PPR   INITS64     INITS64, INITS32 (not recommended)
# PACK_AMR   no          yes, no (use HDF5 groups to pack grids)
# PACK_MEM   no          yes, no (use HDF5 in-core buffering)
# PREC_IO    no          yes, no (retain full precision in I/O)
# OOC_BDRY   yes         yes, no (out-of-core memory optimization for top grid boundary)
# FFT_UXP    yes         yes, no (fft book-keeping on top grid)
# IBM_TMAP   no          yes, no (IBM LL task mapping)
# ENZO_END   HDF5_BE     HDF5_BE, HDF5_LE (not recommended)
# ENZO_SRB   no          yes, no (use SRB)
#
# The makefile will attempt to determine the operating system and
# its default message-passing library (in most cases MPI), but by
# setting the following environment variables one can easily
# experiment with new systems. All that is required is consistency
# in the naming convention, and machine-specific include files
# for HDF4 or HDF5.  It may also be necessary to specify FORTPR.
#
# ENZO_ARCH  auto        anything you like (e.g. cray_x1)
# ENZO_MESS  auto        mpi, vmi, mpich etc.
#-----------------------------------------------------------------------


# Constants - do not edit!
null :=

# Settings - change at will
ENZO_INT := SMALL_INTS
INIT_PPR := INITS64
ENZO_XPR := r4
ENZO_PPR := p8

ENZO_AMR := yes
PACK_AMR := yes
PACK_MEM := yes

MAX_GRIDS := 100000
MAX_BARYONS := 16
MAX_CPU_PER_NODE := 8

PREC_IO := no
OOC_BDRY := yes
FFT_UXP := yes
IBM_TMAP := no
ENZO_SRB := no

# Special Options

# All the bells and whistles
#
# AMR_OPT := -D SIB1 -D SIB2 -D SIB3 -D SIB4 -D SIB5 -D STATIC_SIBLING_LIST -D FLUX_FIX -D SAB -D DC_OPT_SIBSUB \
#            -D JB_OPT_FAST_NEIGHBOR_SEARCH -D USE_DT_LIMIT -D FORCE_BUFFER_PURGE -D FORCE_MSG_PROGRESS -D ENABLE_LOAD_BALANCE
#
# These settings used with the 500 Mpc 512^3 AMR, i.e. disable new flux correction

ifeq ($(ENZO_AMR),yes)
  AMR_OPT := -D SIB1 -D SIB2 -D SIB3 -D SIB4 -D SIB5 -D NO_FLUX_FIX -D NO_SAB -D NO_DC_OPT_SIBSUB -D JB_OPT_FAST_NEIGHBOR_SEARCH -D USE_DT_LIMIT -D FORCE_BUFFER_PURGE -D FORCE_MSG_PROGRESS -D DISABLE_LOAD_BALANCE -D MISCOUNT
else
  AMR_OPT := -D SIB1 -D SIB2 -D SIB3 -D SIB4 -D SIB5 -D STATIC_SIBLING_LIST -D NO_FLUX_FIX -D NO_SAB -D NO_DC_OPT_SIBSUB -D JB_OPT_FAST_NEIGHBOR_SEARCH -D USE_DT_LIMIT -D FORCE_BUFFER_PURGE -D FORCE_MSG_PROGRESS -D DISABLE_LOAD_BALANCE -D MISCOUNT
endif


#JBPERF_INC := /users/ucsd/drreynol/jbPerf/include
#JBPERF_LIB := /users/ucsd/drreynol/jbPerf/lib
#MGMPI_INC := /users/ucsd/drreynol/mgmpi-code/include
#MGMPI_LIB := /users/ucsd/drreynol/mgmpi-code/lib

# Set defaults

ifeq ($(ENZO_PPR),$(null))
  ENZO_PPR := p8
endif
ifeq ($(ENZO_XPR),$(null))
  ENZO_XPR := r8
endif

ifeq ($(ENZO_AMR),yes)
  MODE := FastSib_
else
  MODE := Unigrid_
endif

ifeq ($(MAX_GRIDS),$(null))
  MAX_GRIDS := 100000
endif

ifeq ($(MAX_BARYONS),$(null))
  MAX_BARYONS := 20
endif

ifeq ($(PACK_AMR),yes)
  IO_PACK := USE_HDF5_GROUPS
  IO_OPT := SINGLE_HDF5_OPEN_ON_INPUT
  PG := Group_
  ifeq ($(PACK_MEM),yes)
    IC := Incore
    IO_MEM_BUFF_OUT := USE_HDF5_OUTPUT_BUFFERING
    IO_MEM_BUFF_INP := DONT_USE_HDF5_INPUT_BUFFERING
  else
    IC :=
    IO_MEM_BUFF_OUT := NO_HDF5_OUTPUT_BUFFERING
    IO_MEM_BUFF_INP := NO_HDF5_INPUT_BUFFERING
  endif
else
  IO_PACK := NO_HDF5_GROUPS
  IO_OPT := NO_SINGLE_HDF5_OPEN_ON_INPUT
  PG :=
  IC :=
  IO_MEM_BUFF_OUT := NO_HDF5_OUTPUT_BUFFERING
  IO_MEM_BUFF_INP := NO_HDF5_INPUT_BUFFERING
endif

ifeq ($(PREC_IO),yes)
  IOT := IO_64
else
  IOT := IO_32
endif

ifeq ($(IBM_TMAP),yes)
  TM := TaskMap_
  TASK_MAP := TASKMAP
  USE_LOADL := DONT_USE_LL
else
  TM :=
  TASK_MAP := NO_TASKMAP
  USE_LOADL := DONT_USE_LL
endif

ifeq ($(OOC_BDRY),yes)
  OOC_OPT := OOC_BOUNDARY
else
  OOC_OPT := NO_OOC_BOUNDARY
endif

ifeq ($(FFT_UXP),yes)
  UXP_OPT := UNIGRID_TRANSPOSE
else
  UXP_OPT := NO_UNIGRID_TRANSPOSE
endif


# System dependent options

ifeq ($(ENZO_ARCH),$(null))

ifeq ($(SYSTEM),UNICOS/mp)
  ENZO_ARCH = crayx1
  ENZO_MESS = nompi
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -s real64 -s integer64
    else
      FORTPR = -s real32 -s integer64
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -s real64 -s integer32
    else
      FORTPR = -s real32 -s integer32
    endif
  endif
endif

ifeq ($(SYSTEM),IRIX64)
  ENZO_ARCH = irix64
  ENZO_MESS = mpi
  ifeq ($(ENZO_XPR),r8)
    FORTPR = -r8 -r8const -d8
  endif
endif

ifeq ($(SYSTEM),OSF1)
  ENZO_ARCH = osf64
  ENZO_MESS = mpi
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -real_size 64 -integer_size 64 -double_size 64 -fpconstant
    else
      FORTPR = -real_size 32 -integer_size 64 -double_size 64 -fpconstant
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -real_size 64 -integer_size 32 -double_size 64 -fpconstant
    else
      FORTPR = -real_size 32 -integer_size 32 -double_size 64 -fpconstant
    endif
  endif
endif

ifeq ($(SYSTEM),AIX)
  ifeq ($(OBJECT_MODE),$(null))
    ENZO_ARCH = aix32
    ENZO_MESS = mpi
  endif
  ifeq ($(OBJECT_MODE),64)
    ENZO_ARCH = aix64_LLtune
    ENZO_MESS = mpi
  endif
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=8 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=8
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=4 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=4
    endif
  endif
endif

ifeq ($(SYSTEM),BGL)
  ENZO_ARCH = bgl
  ENZO_MESS = mpi.opt
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=8 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=8 -qrealsize=4
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=4 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=4 -qrealsize=4
    endif
  endif
endif

ifeq ($(SYSTEM),SunOS)
  ENZO_ARCH = sun64
  ENZO_MESS = mpi
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -xtypemap=real:64,double:64,integer:64
    else
      FORTPR = -xtypemap=real:32,double:64,integer:64
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -xtypemap=real:64,double:64,integer:32
    else
      FORTPR = -xtypemap=real:32,double:64,integer:32
    endif
  endif
endif

ifeq ($(SYSTEM),Linux)
  ifeq ($(UNAMEM),ia64)
    ENZO_ARCH = tg64_sdsc_v8
    ENZO_MESS = mpich
  endif
  ifeq ($(UNAMEM),i686)
    ENZO_ARCH = i686
    ENZO_MESS = vmi
  endif
  ifeq ($(UNAMEM),x86_64)
    ENZO_ARCH = xt3_pgi_opt
    ENZO_MESS = mpi
  endif
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -r8 -i8
    else
      FORTPR = -r4 -i8
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -r8 -i4
    else
      FORTPR = -r4 -i4
    endif
  endif
endif

endif

# Legacy options

ifeq ($(ENZO_SRB),$(null))
  ENZO_SRB := no
endif

ifeq ($(ENZO_END),$(null))
  ENZO_END := HDF5_BE
endif

ifeq ($(SYSTEM),Linux)
  CPP_FLAG := -traditional
endif
ifeq ($(SYSTEM),OSF1)
  CPP_FLAG := -traditional
endif

#-------------------  object files  ------------------------------------


F90X = 	select_fft.o					\
	fft90.o

XOBJ =	AdiabaticExpansionInitialize.o			\
	AssignGridToTaskMap.o				\
	CheckEnergyConservation.o			\
	CheckForOutput.o				\
	CheckForTimeAction.o				\
	CollapseTestInitialize.o			\
	CommunicationBroadcastValue.o			\
	CommunicationBufferedSend.o			\
	CommunicationCombineGrids.o			\
	CommunicationInitialize.o			\
	CommunicationLoadBalanceGrids.o			\
	CommunicationParallelFFT.o			\
	CommunicationPartitionGrid.o			\
	CommunicationReceiveFluxes.o			\
	CommunicationSendFluxes.o			\
	CommunicationShareGrids.o			\
	CommunicationTransferParticles.o		\
	CommunicationTranspose.o			\
	CommunicationUpdateStarParticleCount.o		\
	CommunicationUtilities.o			\
	ComputePotentialFieldLevelZero.o		\
	ComputeTable.o					\
	ComputeRandomForcingNormalization.o		\
	Continue.o					\
	CopyOverlappingParticleMassFields.o		\
	CopyOverlappingZones.o				\
	CosmologyComputeExpansionFactor.o		\
	CosmologyComputeExpansionTimestep.o		\
	CosmologyComputeTimeFromRedshift.o		\
	CosmologyGetUnits.o				\
	CosmologyReadParameters.o			\
	CosmologySimulationInitialize.o			\
	NestedCosmologySimulationInitialize.o		\
	CosmologyWriteParameters.o			\
	CreateSUBlingList.o				\
	DeleteFluxes.o					\
	DeleteSUBlingList.o				\
	DepositBaryons.o				\
	DepositParticleMassField.o			\
	DoubleMachInitialize.o				\
	Enzo_Dims_create.o				\
	Mpich_V1_Dims_create.o				\
	EvolveHierarchy.o				\
	$(MODE)EvolveLevel.o				\
	$(MODE)EvolveLevelRoutinesOptimized.o		\
	ExternalBoundary_AppendForcingToBaryonFields.o	\
	ExternalBoundary_DetachForcingFromBaryonFields.o	\
	ExternalBoundary_IdentifyPhysicalQuantities.o	\
	ExternalBoundary_InitializeExternalBoundaryFaceIO.o	\
	ExternalBoundary_Prepare.o			\
	ExternalBoundary_SetDoubleMachBoundary.o	\
	ExternalBoundary_SetExternalBoundaryIO.o	\
	ExternalBoundary_SetExternalBoundaryParticles.o	\
	ExternalBoundary_SetShockPoolBoundary.o		\
	ExternalBoundary_SetWavePoolBoundary.o		\
	ExternalBoundary_constructor.o			\
	FastFourierTransform.o				\
	FastFourierTransformPrepareComplex.o		\
	FastFourierTransformSGIMATH.o			\
	FastSiblingLocatorInitialize.o			\
	FastSiblingLocatorInitializeStaticChainingMesh.o \
	FastSiblingLocatorFinalize.o			\
	FindCube.o					\
	FindField.o					\
	FindSubgrids.o					\
	Gadget.o					\
	GadgetInitCoolMemory.o				\
	GadgetIonizeParamsTable.o			\
	GadgetMakeCoolingTable.o			\
	GadgetReadIonizeParams.o			\
	GetNodeFreeMemory.o				\
	GravityBdryExchange.o				\
	GravityEquilibriumTestInitialize.o		\
	Grid_AccelerationBoundaryRoutines.o		\
	Grid_AddBaryonsToGravitatingMassField.o		\
	Grid_AddExternalAcceleration.o			\
	Grid_AddFieldMassToMassFlaggingField.o		\
	Grid_AddOverlappingParticleMassField.o		\
	Grid_AddRandomForcing.o				\
	Grid_AddToBoundaryFluxes.o			\
	Grid_AllocateGrids.o				\
	Grid_AnalyzeTrackPeaks.o			\
	Grid_AppendForcingToBaryonFields.o		\
	Grid_ApplyTimeAction.o				\
	Grid_CalculateAngularMomentum.o			\
	Grid_CheckForExternalReflections.o		\
	Grid_CheckForOverlap.o				\
	Grid_CheckForPossibleOverlap.o			\
	Grid_CheckForSharedFace.o			\
	Grid_CleanUp.o					\
	Grid_CleanUpMovedParticles.o			\
	Grid_ClearBoundaryFluxes.o			\
	Grid_ClearFlaggingField.o			\
	Grid_ClearGravitatingMassField.o		\
	Grid_ClearGravitatingMassFieldParticles.o	\
	Grid_ClearMassFlaggingField.o			\
	Grid_ClearParticleAccelerations.o		\
	Grid_CollapseTestInitializeGrid.o		\
	Grid_CollectGridInformation.o			\
	Grid_CommunicationMoveGrid.o			\
	Grid_Irecv_CommunicationSendParticles.o		\
	Grid_Irecv_CommunicationSendRegion.o	\
	Grid_Irecv_CommunicationReceiveRegion.o		\
	Grid_CommunicationTransferParticles.o		\
	Grid_ComovingExpansionTerms.o			\
	Grid_ComovingGravitySourceTerm.o		\
	Grid_ComputeAccelerationField.o			\
	Grid_ComputeAccelerationFieldExternal.o		\
	Grid_ComputeAccelerations.o			\
	Grid_ComputeCoolingTime.o			\
	Grid_ComputeElementalDensity.o			\
	Grid_ComputeEnergy.o				\
	Grid_ComputeExternalNohBoundary.o		\
	Grid_ComputeExternalNohBoundary2D.o		\
	Grid_ComputeGammaField.o			\
	Grid_ComputePressure.o				\
	Grid_ComputePressureDualEnergyFormalism.o	\
	Grid_ComputeTemperatureField.o			\
	Grid_ComputeTimeStep.o				\
	Grid_ComputeXrayEmissivity.o			\
	Grid_ConvertTotalEnergyToGasEnergy.o		\
	Grid_CopyOverlappingMassField.o			\
	Grid_CopyParentToGravitatingFieldBoundary.o	\
	Grid_CopyBaryonFieldToOldBaryonField.o		\
	Grid_CopyPotentialField.o			\
	Grid_CopyPotentialToBaryonField.o		\
	Grid_CopyZonesFromGrid.o			\
	Grid_CopyZonesFromGridCountOnly.o		\
	Grid_CorrectForRefinedFluxes.o			\
	FluxFix_Grid_CorrectForRefinedFluxes.o		\
	Grid_DebugCheck.o				\
	Grid_DeleteAllFields.o				\
	Grid_DeleteFlaggingField.o			\
	Grid_DetachForcingFromBaryonFields.o		\
	Grid_Irecv_DepositBaryons.o			\
	Grid_DepositParticlePositions.o			\
	Grid_DepositPositions.o				\
	Grid_DoubleMachInitializeGrid.o			\
	Grid_FastSiblingLocatorAddGrid.o		\
	Grid_FastSiblingLocatorFindSiblings.o		\
	Grid_FinishFFT.o				\
	Grid_FlagBufferZones.o				\
	Grid_FlagCellsToBeRefinedByCoolingTime.o	\
	Grid_FlagCellsToBeRefinedByJeansLength.o	\
	Grid_FlagCellsToBeRefinedByMass.o		\
	Grid_FlagCellsToBeRefinedByMustRefineParticles.o	\
	Grid_FlagCellsToBeRefinedBySlope.o		\
	Grid_FlagCellsToBeRefinedByShear.o		\
	Grid_FlagCellsToBeRefinedByShocks.o		\
	Grid_GadgetCalculateCooling.o			\
	Grid_GadgetComputeTemperatureDEF.o		\
	Grid_GadgetComputeTemperature.o			\
	Grid_Gadgetconvertutotemp.o			\
	Grid_GadgetCoolingRateFromU.o			\
	Grid_GadgetCoolingRate.o			\
	Grid_GadgetCoolingTime.o			\
	Grid_GadgetEquilibriumCooling.o			\
	Grid_Gadgetfindabundancesandrates.o		\
	Grid_GetProjectedBoundaryFluxes.o		\
	Grid_GravityEquilibriumTestInitializeGrid.o	\
	Grid_IdentifyNewSubgrids.o			\
	Grid_IdentifyNewSubgridsSmall.o			\
	Grid_IdentifyPhysicalQuantities.o		\
	Grid_IdentifySpeciesFields.o			\
	Grid_ImplosionInitializeGrid.o			\
	Grid_InheritProperties.o			\
	Grid_InitializeGravitatingMassField.o		\
	Grid_InitializeGravitatingMassFieldParticles.o	\
	Grid_InitializeUniformGrid.o			\
	Grid_InterpolateAccelerations.o			\
	Grid_InterpolateBoundaryFromParent.o		\
	Grid_InterpolateFieldValues.o			\
	Grid_InterpolateParticlePositions.o		\
	Grid_InterpolatePositions.o			\
	Grid_KHInitializeGrid.o				\
	Grid_MoveAllParticles.o				\
	Grid_MoveSubgridParticles.o			\
	Grid_MoveSubgridParticlesFast.o			\
	Grid_NohInitializeGrid.o			\
	Grid_OutputAsParticleData.o			\
	Grid_OutputGridMovieData.o			\
	Grid_OutputStarParticleInformation.o		\
	Grid_PrepareBoundaryFluxes.o			\
	Grid_PrepareFFT.o				\
	Grid_PrepareGreensFunction.o			\
	Grid_PreparePeriodicGreensFunction.o		\
	Grid_PrepareGrid.o				\
	Grid_PrepareGridDerivedQuantities.o		\
	Grid_PreparePotentialField.o			\
	Grid_PrepareRandomForcingNormalization.o	\
	Grid_PressurelessCollapseInitialize.o		\
	Grid_ProjectSolutionToParentGrid.o		\
	Grid_ProjectToPlane.o				\
	Grid_ProtostellarCollapseInitializeGrid.o	\
	Grid_RadiationComputeDensities.o		\
	Grid_ReturnFluxDims.o				\
	Grid_ReturnGridInfo.o				\
	Grid_RemoveForcingFromBaryonFields.o		\
	Grid_RestoreEnergyConsistency.o			\
	Grid_SedovBlastInitializeGrid.o			\
	Grid_SedovBlastInitializeGrid3D.o		\
	Grid_SetExternalBoundaryValues.o		\
	Grid_SetFlaggingField.o				\
	Grid_SetFlaggingFieldStaticRegions.o		\
	Grid_SetMinimumSupport.o			\
	Grid_ShockTubeInitializeGrid.o			\
	Grid_SolveForPotential.o			\
	Grid_SolveHydroEquations.o			\
	Grid_SolveRadiativeCooling.o			\
	Grid_SolveRateEquations.o			\
	Grid_SortParticlesByNumber.o			\
	Grid_SphericalInfallGetProfile.o		\
	Grid_SphericalInfallInitializeGrid.o		\
	Grid_StarParticleHandler.o			\
	Grid_SupernovaRestartInitialize.o		\
	Grid_TestGravityCheckResults.o			\
	Grid_TestGravitySphereCheckResults.o		\
	Grid_TestGravityInitializeGrid.o		\
	Grid_TestGravityMotionInitializeGrid.o		\
	Grid_TestGravitySphereInitializeGrid.o		\
	Grid_TracerParticleCreateParticles.o		\
	Grid_TracerParticleOutputData.o			\
	Grid_TracerParticleSetVelocity.o		\
	Grid_UpdateParticlePosition.o			\
	Grid_UpdateParticleVelocity.o			\
	Grid_WriteCube.o				\
	Grid_WriteCubeInterpolate.o			\
	Grid_WriteGridInterpolate.o			\
	Grid_Group_WriteGridInterpolate.o		\
	Grid_WriteMemoryMap.o				\
	Grid_WriteTaskMap.o				\
	Grid_WriteNewMovieData.o			\
	Grid_WriteStuff.o				\
	Grid_ZeldovichPancakeInitializeGrid.o		\
	Grid_ZeroSolutionUnderSubgrid.o			\
	Grid_constructor.o				\
	Grid_destructor.o				\
	Hierarchy_DeleteHierarchyEntry.o		\
	IdentifyNewSubgridsBySignature.o		\
	ImplosionInitialize.o				\
	InitializeEquilibriumCoolData.o			\
	InitializeGadgetEquilibriumCoolData.o		\
	InitializeLocal.o				\
	InitializeNew.o					\
	InitializeRadiationFieldData.o			\
	InitializeRateData.o				\
	InterpretCommandLine.o				\
	Isdigit.o					\
	KHInitialize.o					\
	LevelHierarchy_AddLevel.o			\
	ListIO.o					\
	MemoryAllocationRoutines.o			\
	MultigridSolver.o				\
	NohInitialize.o					\
	OutputLevelInformation.o			\
	$(MODE)PrepareGravitatingMassField.o		\
	PressurelessCollapseInitialize.o		\
	ProcMap.o					\
	ProtostellarCollapseInitialize.o		\
	ProtoSubgrid_AcceptableGrid.o			\
	ProtoSubgrid_CleanUp.o				\
	ProtoSubgrid_ComputeSecondDerivative.o		\
	ProtoSubgrid_ComputeSignature.o			\
	ProtoSubgrid_CopyFlaggedZonesFromGrid.o		\
	ProtoSubgrid_CopyToNewSubgrid.o			\
	ProtoSubgrid_FindGridsByZeroSignature.o		\
	ProtoSubgrid_ReturnNthLongestDimension.o	\
	ProtoSubgrid_ShrinkToMinimumSize.o		\
	ProtoSubgrid_constructor.o			\
	QuickSortAndDrag.o				\
	RadiationFieldCalculateRates.o			\
	RadiationFieldUpdate.o				\
	ReadAllData.o					\
	Group_ReadAllData.o				\
	ReadDataHierarchy.o				\
	Group_ReadDataHierarchy.o			\
	ReadParameterFile.o				\
	ReadRadiationData.o				\
	ReadStarParticleData.o				\
	$(MODE)RebuildHierarchy.o			\
	ReduceFragmentation.o				\
	ReportMemoryUsage.o				\
	SedovBlastInitialize.o				\
	SetDefaultGlobalValues.o			\
	ShockInABoxInitialize.o				\
	ShockPoolInitialize.o				\
	ShockTubeInitialize.o				\
	SphericalInfallInitialize.o			\
	SupernovaRestartInitialize.o			\
	SysMkdir.o					\
	TestGravityCheckResults.o			\
	TestGravityInitialize.o				\
	TestGravityMotion.o				\
	TestGravitySphereInitialize.o			\
	TestGravitySphereCheckResults.o			\
	TracerParticleCreation.o			\
	TurbulenceSimulationInitialize.o		\
	OptimizedUnigridCommunicationTranspose.o	\
	UpdateParticlePositions.o			\
	WavePoolInitialize.o				\
	WriteAllData.o					\
	Group_WriteAllData.o				\
	WriteAllDataCubes.o				\
	WriteDataCubes.o				\
	WriteDataHierarchy.o				\
	Group_WriteDataHierarchy.o			\
	WriteHierarchyStuff.o				\
	WriteMemoryMap.o				\
	WriteMovieData.o				\
	WriteParameterFile.o				\
	WriteRadiationData.o				\
	WriteStarParticleData.o				\
	WriteStreamData.o				\
	WriteTaskMap.o					\
	WriteTracerParticleData.o			\
	ZeldovichPancakeInitialize.o			\
	E_ColumnFormat.o				\
	F_ColumnFormat.o				\
	P_ColumnFormat.o				\
	I_ColumnFormat.o				\
	arcsinh.o					\
	arccosh.o					\
	flow.o						\
	c_message.o					\
	f_message.o					\
	mused.o						\
	performance.o					\
	Options.o					\
	ENZO_Driver.o					\
        calc_dt.o                                       \
	calc_photo_rates.o				\
	calc_rad.o					\
	calc_rates.o					\
        calcdiss.o					\
	chtable.o					\
	cicinterp.o					\
	cic_deposit.o					\
	cic_flag.o					\
	cic_interp.o					\
	colh2diss.o					\
	coll_rates.o					\
	comp_accel.o					\
	cool1d.o					\
	cool1d_multi.o					\
	cool_multi_time.o				\
	cool_time.o					\
        euler.o						\
        expand_terms.o                                  \
	fft_utils.o					\
	fortio.o					\
	fft66.o						\
	ffte4X.o					\
	fourn.o						\
	power_of_2.o					\
	prefort2.o					\
	cray_x1_fft64.o					\
	ibm_fft64.o					\
	nr_1d.o						\
	nr_2d.o						\
	nr_3d.o						\
	wrapper1d.o					\
	wrapper2d.o					\
	wrapper3d.o					\
	rotate2d.o					\
	rotate3d.o					\
	acml_st1.o					\
	cray_x1_st1_fft64.o				\
	ffte_st1.o					\
	mkl_st1.o					\
	nr_st1.o					\
	s66_st1.o					\
	s90_st1.o					\
	ibm_st1_fft64.o					\
	sgi_st1_fft64.o					\
	grid_cic.o					\
	int_lin3d.o					\
	int_spline.o					\
	interp1d.o					\
	interp2d.o					\
	interp3d.o					\
	interpolate.o					\
        inteuler.o					\
        intlgrg.o                                       \
        intrmp.o                                        \
        intvar.o                                        \
        lgrg.o                                          \
	mcooling.o					\
	mg_calc_defect.o				\
	mg_prolong.o					\
	mg_prolong2.o					\
	mg_relax.o					\
	mg_restrict.o					\
	mpi_error_file.o				\
	stop_all_cpus.o					\
	multi_cool.o					\
	ngpinterp.o					\
        pgas2d.o					\
        pgas2d_dual.o					\
        ppm_de.o					\
        ppm_lr.o					\
	project.o					\
	projplane.o					\
	prolong.o					\
	prolong_tsc.o					\
        remap.o                                         \
	smooth.o					\
	smooth_deposit.o				\
	solve_cool.o					\
	solve_rate.o					\
	star_maker1.o					\
	star_maker2.o					\
	star_maker3.o					\
	star_maker4.o					\
	star_maker5.o					\
	star_maker7.o					\
        tscint1d.o					\
        tscint2d.o					\
        tscint3d.o					\
        twoshock.o					\
	utilities.o					\
        xeuler_sweep.o					\
        xlagrange_sweep.o                               \
        yeuler_sweep.o					\
        ylagrange_sweep.o                               \
        zeuler_sweep.o                                  \
	zeus_main.o					\
	zeus_utilities.o				\
	zeus_source.o					\
	zeus_xtransport.o				\
	zeus_ytransport.o				\
	zeus_ztransport.o				\
        zlagrange_sweep.o 				\
	wall_clock.o					\
	FreeRealMem.o

H5OBJ =	ExternalBoundary_ReadExternalBoundary.o		\
	ExternalBoundary_WriteExternalBoundary.o	\
	write_bt.o	\
	write_bv.o	\
	read_bt.o	\
	read_bv.o	\
	CSIG7.o		\
	NCSIG7.o	\
	Grid_TurbulenceSimulationInitialize.o		\
	Grid_ReadGrid.o					\
	Grid_Group_ReadGrid.o				\
	Grid_WriteGrid.o				\
	Grid_Group_WriteGrid.o				\
	Grid_WriteGridX.o				\
	Grid_ReadRandomForcingFields.o			\
	ExtractSection.o				\
	OutputAsParticleData.o				\
	ProjectToPlane.o				\
	ReadAttr.o					\
	ReadFile.o					\
	ReadGridFile.o					\
	ReadIntFile.o					\
	WriteStringAttr.o

SROBJ = SRB_FileMover.o					\
	SRB_MakeDir.o					\
	SRB_Mkdir.o					\
	SRB_Clean.o					\
	SRB_Delete.o					\
	SRB_Mover.o					\
	SRB_Put.o

SDOBJ = SRB_DummyMakeDir.o				\
	SRB_DummyFileMover.o

ifeq ($(ENZO_INT),SMALL_INTS)
  ifeq ($(ENZO_AMR),yes)
    EXENAME := enzo5a_32
  else
    EXENAME := enzo5u_32
  endif
else
  ifeq ($(ENZO_AMR),yes)
    EXENAME := enzo5a_64
  else
    EXENAME := enzo5u_64
  endif
endif

ifeq ($(ENZO_SRB),no)
  OBJ     := ${F90X} ${XOBJ} ${H5OBJ} ${SDOBJ}
else
  OBJ     := ${F90X} ${XOBJ} ${H5OBJ} ${SROBJ}
endif

PRECISION := dummy

#-------------------  macro definitions --------------------------------

.SUFFIXES:
.SUFFIXES: .src .src90 .c .f .o .C

HEADER  = CosmologyParameters.h ExternalBoundary.h Fluxes.h \
	  Grid.h GridList.h Hierarchy.h LevelHierarchy.h ProtoSubgrid.h \
	  TopGridData.h global_data.h macros_and_parameters.h typedefs.h region.h \
	  CoolData.h RateData.h StarParticleData.h RadiationFieldData.h \
	  fortran.def

HEADER  = \
	CoolData.h \
	CosmologyParameters.h \
	ExternalBoundary.h \
	Fluxes.h \
	fortran.def \
	global_data.h \
	Grid.h \
	GridList.h \
	Hierarchy.h \
	LevelHierarchy.h \
	macros_and_parameters.h\
	ProtoSubgrid.h \
	RadiationFieldData.h \
	RateData.h\
	region.h \
	StarParticleData.h \
	TopGridData.h \
	typedefs.h

EXEDIR  =

#------------------ include machine-dependent macros -------------------

INCLUDE_MAKEFILE = $(HOME)/MakeMacros/Parallel/Make.${ENZO_ARCH}.${ENZO_MESS}
include ${INCLUDE_MAKEFILE}

#--------------------  implicit rules ----------------------------------

.src90.o:
	${CPP} -D${ENZO_PPR} ${DEFINES} -D${ENZO_XPR} -P ${CPP_FLAG} $< > $*.f90
	${FC} ${F90SRC} ${FFLAGS} ${FC_OPT} ${FREE90} ${FORTPR} ${DEBUG} ${OPTS} $*.f90
.src.o:
	${CPP} -D${ENZO_PPR} ${DEFINES} -D${ENZO_XPR} -P ${CPP_FLAG} $< > $*.f
	${FC} ${FFLAGS} ${FC_OPT} ${FORTPR} ${DEBUG} ${OPTS} $*.f 
.C.o:
	${CCxx} ${CCxxFLAGS} ${CCxx_OPT} ${AMR_OPT} -D${OOC_OPT} -D${ENZO_INT} -D${INIT_PPR} -D${ENZO_PPR} -D${ENZO_XPR} -D${ENZO_END} -D${TASK_MAP} -D${UXP_OPT} -D${IOT} -D${IO_PACK} -D${IO_OPT} -D${IO_MEM_BUFF_OUT} -D${IO_MEM_BUFF_INP} -D__max_subgrids=${MAX_GRIDS} -D__max_baryons=${MAX_BARYONS} -D__max_cpu_per_node=${MAX_CPU_PER_NODE} -DNO_ISO_GRAV -DNO_USE_JBPERF -DANALYSIS_TOOLS ${DEBUG} ${OPTS} $*.C
.c.o:
	${CC} ${CFLAGS} ${CC_OPT} -D${ENZO_INT} -D${ENZO_PPR} -D${ENZO_XPR} -D${ENZO_END} -D${TASK_MAP} -D${USE_LOADL} -DANALYSIS_TOOLS ${DEBUG} ${OPTS} -c $<

#-------------------------  main target  -------------------------------

${EXENAME}: ${OBJ}
	${LDR} ${LDR_OPT} ${DEBUG} -o ${EXEDIR}${EXENAME} ${OBJ} ${LIB}


#${LDR} ${LDR_OPT} ${DEBUG} -L${MGMPI_LIB} -ldmgmpi -o ${EXEDIR}${EXENAME} ${OBJ} ${LIB}

#-------------------------  documentation ------------------------------

Doc:
	echo "VERSION   : " ${VERSION}          > Compile_Options
	echo "DATE      : " ${DATE}            >> Compile_Options
	echo "CWD       : " ${CWD}             >> Compile_Options
	echo "SYSTEM    : " ${SYSTEM}          >> Compile_Options
	echo "SYSNAME   : " ${UNAMEM}          >> Compile_Options
	echo " "                               >> Compile_Options
	echo "ENZO_ARCH : " ${ENZO_ARCH}       >> Compile_Options
	echo "ENZO_MESS : " ${ENZO_MESS}       >> Compile_Options
	echo "ENZO_INTS : " ${ENZO_INT}        >> Compile_Options
	echo "INIT_PPR  : " ${INIT_PPR}        >> Compile_Options
	echo "ENZO_PPR  : " ${ENZO_PPR}        >> Compile_Options
	echo "ENZO_XPR  : " ${ENZO_XPR}        >> Compile_Options
	echo "ENZO_AMR  : " ${ENZO_AMR}        >> Compile_Options
	echo "FFT_UXP   : " ${FFT_UXP}         >> Compile_Options
	echo "PACK_AMR  : " ${PACK_AMR}        >> Compile_Options
	echo "PREC_IO   : " ${PREC_IO}         >> Compile_Options
	echo "TASK_MAP  : " ${IBM_TMAP}        >> Compile_Options
	echo "ENZO_SRB  : " ${ENZO_SRB}        >> Compile_Options
	echo "ENZO_END  : " ${ENZO_END}        >> Compile_Options
	echo " "                               >> Compile_Options
	echo "AMR_OPT   : " ${AMR_OPT}         >> Compile_Options
	echo "OOC_OPT   : " ${OOC_OPT}         >> Compile_Options
	echo " "                               >> Compile_Options
	echo "MODE      : " ${MODE}            >> Compile_Options
	echo "PG        : " ${PG}              >> Compile_Options
	echo "TM        : " ${TM}              >> Compile_Options
	echo " "                               >> Compile_Options
	echo "INCLUDE   : " ${INCLUDE_MAKEFILE}  >> Compile_Options
	echo " "                               >> Compile_Options
	echo "FORTPR    : " ${FORTPR}          >> Compile_Options
	echo "FC        : " ${FC}              >> Compile_Options
	echo "FC_OPT    : " ${FC_OPT}          >> Compile_Options
	echo "FREE90    : " ${FREE90}          >> Compile_Options
	echo "FFLAGS    : " ${FFLAGS}          >> Compile_Options
	echo " "                               >> Compile_Options
	echo "CPP       : " ${CPP}             >> Compile_Options
	echo "CPP_FLAG  : " ${CPP_FLAG}        >> Compile_Options
	echo "DEFINES   : " ${DEFINES}         >> Compile_Options
	echo "OPTIONS   : " ${OPTS}            >> Compile_Options
	echo " "                               >> Compile_Options
	echo "CC        : " ${CC}              >> Compile_Options
	echo "CC_OPT    : " ${CC_OPT}          >> Compile_Options
	echo "CFLAGS    : " ${CFLAGS}          >> Compile_Options
	echo " "                               >> Compile_Options
	echo "C++       : " ${CCxx}            >> Compile_Options
	echo "C++_OPT   : " ${CCxx_OPT}        >> Compile_Options
	echo "C++_FLAGS : " ${CCxxFLAGS}       >> Compile_Options
	echo " "                               >> Compile_Options
	echo "LDR       : " ${LDR}             >> Compile_Options
	echo "LDR_OPT   : " ${LDR_OPT}         >> Compile_Options
	echo "LIB       : " ${LIB}             >> Compile_Options
	echo " "                               >> Compile_Options
	echo "HDF5      : " ${HDF5_INSTALL}    >> Compile_Options
	echo "HDF5_PP   : " ${HDF5_INSTALL_PP} >> Compile_Options

#---------------------  special compilation rules ----------------------


#----------------------------- help ------------------------------------

help:
	@echo Type 'make' to generate executable
	@echo Type 'make clean' to remove object files, etc

#----------------------------- clean -----------------------------------

clean:
	rm -f *.o *.mod *.f *.f90 *~ ${EXEDIR}${EXENAME} Compile_Options

#-----------------------------------------------------------------------

${OBJ}: ${HEADER}
