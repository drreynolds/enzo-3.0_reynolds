Problem Parameter File:
-----------------------
* ProblemType [400<=x<500]
* RadiationFieldType [!=(10 || 11)]
  - must NOT be 10 or 11, since those imply background radiation
    approximations
* RadiativeTransfer [0]
  - disables ray-tracing solver
* RadiativeTransferOpticallyThinH2 [0]
  - disables 1/r^2 approximation for background radiation from stars.
* RadiativeTransferRadiationPressure [0]
  - this must be disabled for now, but eventually I need to allow this
    to be 1, implying that I would fill in the RadiationPressure
    acceleration terms for hydro.
* RadiativeTransferFLD [2]
  - we're using a field-based radiative transfer solver for all
    radiation.  A value of 1 implies that we'll do a field solver for
    optically-thin LW radiation only.
* RadiativeTransferFLDCallOnLevel [0]
  - use field solver on root grid.  Nonzero values would imply that we
    are using solver on a static nested grid (currently unavailable).
* UseHydro [0,1]
  - for radiation/chemistry/heating problems, set to 0; if coupling to
    hydrodynamics then set to 1.
* RadiativeCooling [0]
  - disables Enzo's operator-split radiative cooling module.
* GadgetEquilibriumCooling [0]
  - disables Enzo'soperator-split gadget equilibrium cooling module.
* ImplicitProblem [1]
  - 1 specifies this implicit radiation/chemistry/heating module.
* RadHydroParamfile
  - set to be the file containing all solver-specific parameters
    (below).
  * wanted to set this to default to the main parameter file.
    {cannot do with current call structure}




Current solver params (variable) [default; choices], -options, +comments:
-------------------------------------------------------------------------
* RadHydroESpectrum (ESpectrum) [0; -1,0,1] 
  - -1 => monochromatic spectrum
  -  0 => power law spectrum
  -  1 => T=10^5 blackbody spectrum
  * change default to 1 [done]
  * fix "-1" to work on any ProblemType [done]
* RadHydroChemistry (Nchem) [0; 0,1,3] 
  - 0 => no chemistry
  - 1 => Hydrogen chemistry
  - 3 => Hydrogen + Helium chemistry
  * change default to 1 for Hydrogen evolution
  + remove Helium as a choice, since never used with this approximation?
* RadHydroHFraction (HFrac) [1.0; 0<=x<=1] 
  * add in check in initalizer to enforce bounds [done]
  + if we remove Helium chemistry as a choice, we should remove this too?
* RadHydroModel (Model) [0; 0,1,2,3,4,5,10,20]
  -  1 => case B HII recombination, no intrinsic emissivity
  -  2 => case A HII recombination, w/ intrinsic emissivity
  -  3 => coupled ODE test case
  -  4 => isothermal case B, no intrinsic emissivity
  -  5 => isothermal ??
  - 10 => LTE model
  - 20 => Marshak-style coupling (specific heat ~T^3)
  * change default to 1 [done]
  + remove choices 3 and 5
* RadHydroMaxDt (maxdt) [1e20; x>0]
* RadHydroMinDt (mindt) [0.0; x>=0]
* RadHydroInitDt (initdt) [1e20; x>0]
* RadHydroDtSolver (dtsolver) [0; 0,1]
  - 0 => use regular approach for dt estimation
  - 1 => use solver statistics for dt estimation
  * maybe disable entirely, since nobody uses this approach [done]
* RadHydroDtNorm (dtnorm) [0.0; x>=0]
  * change default to 2.0 [done]
* RadHydroDtRadFac (dtfac[0]) [1e20; x>0] 
* RadHydroDtGasFac (dtfac[1]) [1e20; x>0] 
* RadHydroDtChemFac (dtfac[2]) [1e20; x>0] 
* RadiationScaling (ErScale) [1.0; x>0]
* EnergyCorrectionScaling (ecScale) [1.0; x>0]
* ChemistryScaling (NiScale) [1.0; x>0]
* RadHydroTheta (theta) [1.0; 0<=x<=1]
* RadHydroImplicitLimiter (LimImp) [0; 0,1,2] 
  - 0 => lag limiter to previous time step
  - 1 => lag limiter to previous Newton iterate
  - 2 => lag only Temperature dependence (unused since "albedo" ignored)
  + remove entirely, and just use 0 (what we always use)
* RadHydroLimiterType (LimType) [3; 0,1,2,3,4]
  - 0 => original Levermore-Pomraning limiter
  - 1 => rational approx. to LP limiter
  - 2 => Reynolds approx. to LP limiter
  - 3 => no limiter
  - 4 => ZEUS limiter
  * change default to zeus limiter [done]
  * add in check that input is allowable [done]
  + test out Reynolds limiter for free-streaming problems
  + maybe hard-code in only the one that we want (to improve
    efficiency) and simplify interface?
* RadiationBoundaryX*Faces = (BdryType[][]) [0; 0,1,2,3]
  - 0 => periodic
  - 1 => Dirichlet
  - 2 => Neumann
  - 3 => Robin
  + check if Robin works, if not remove
* RadHydroAprxJacobian (approx_jac) [0; 0,1] 
  - 0 => use the analytical Jacobian
  - 1 => use the FD Jacobian
  + Maybe remove option, but keep code.  Have Initialize routine
    determine this value automatically, based on Model/AnaltyicChem,
    with the analytical Jacobian always preferred (if available)
* RadHydroInitialGuess (initial_guess) [0; 0,1,2,3,4,5]
  - 0 => previous time step
  - 1 => full fwd Euler step using spatially-local physics
  - 2 => full fwd Euler step using all physics
  - 3 => partial fwd Euler step w/ local physics
  - 4 => partial fwd Euler step w/ all physics
  - 5 => analytical solution to local physics
  + remove 3 and 4, since never used?
* RadHydroAnalyticChem (AnalyticChem) [0; 0,1]
  - 0 => use Theta-method for chemistry and gas
  - 1 => use analytical residual for chemistry and gas
  + maybe change default to 1 (for allowed models)??
* RadHydroSemiImplicit (semi_implicit) [0; 0,1]
  - 0 => fully implicit
  - 1 => linearly implicit
  + delete option entirely
* RadHydroNewtLinesearch (newt_linesearch) [1; 0,1]
  - 0 => no linesearch
  - 1 => use linesearch
  + remove option entirely?  If so, force INConst to be small
* RadHydroNewtIters (newt_maxit) [20; x>0]
* RadHydroNewtNorm (newt_norm) [0; 0,1,2,3,4,5]
  - 0 =>  ||f(x)||_rms < Ntol
  - 1 =>  ||f(x)||_inf < Ntol
  - 2 =>  ||f(x)||_rms / ||f(x0)||_rms < Ntol
  - 3 =>  ||f(x)||_inf / ||f(x0)||_inf  < Ntol
  - 4 =>  ||f(x)||_rms / ||x||_rms < Ntol
  - 5 =>  ||f(x)||_inf / ||x||_inf < Ntol
  + remove option entirely, or maybe just don't describe in User Guide
    (keep for myself).
* RadHydroINConst (newt_INconst) [1e-8; 0<x<1]
  + if we remove linesearch option, reset max value to something
    smaller (e.g. 1e-3)
* RadHydroNewtTolerance (newt_tol) [1e-4; x>1e-15]
  + set max value of 1?
* RadHydroMinLinesearch (newt_MinLinesearch) [1e-10; x>1e-15]
  + set max value of 1e-3
  + maybe remove from UserGuide and just keep for myself?
* RadHydroMaxMGIters (sol_maxit) [50; x>0]
* RadHydroMGRelaxType (sol_rlxtype) [1; 0,1,2,3]
  - 0 => Jacobi
  - 1 => Weighted Jacobi
  - 2 => Red/Black Gauss-Seidel (symmetric)
  - 3 => Red/Black Gauss-Seidel (nonsymmetric)
* RadHydroMGPreRelax (sol_npre) [1; x>=0]
  + change to x>0
* RadHydroMGPostRelax (sol_npost) [1; x>=0]
  + change to x>0
* PlanckOpacityC0 (PlanckOpacityC0) [1.0; x>=0]
* PlanckOpacityC1 (PlanckOpacityC1) [1.0; x>0] 
* PlanckOpacityC2 (PlanckOpacityC2) [0.0; x>=0]
* PlanckOpacityC3 (PlanckOpacityC3) [1.0; x>0] 
* PlanckOpacityC4 (PlanckOpacityC4) [0.0; x>=0]
* EnergyOpacityC0 (EnergyOpacityC0) [1.0; x>=0]
* EnergyOpacityC1 (EnergyOpacityC1) [1.0; x>0] 
* EnergyOpacityC2 (EnergyOpacityC2) [0.0; x>=0]
* EnergyOpacityC3 (EnergyOpacityC3) [1.0; x>0] 
* EnergyOpacityC4 (EnergyOpacityC4) [0.0; x>=0]
* ScatteringOpacityC0 (ScatteringOpacityC0) [1.0; x>=0]
  + omit since never used
* ScatteringOpacityC1 (ScatteringOpacityC1) [1.0; x>0] 
  + omit since never used
* ScatteringOpacityC2 (ScatteringOpacityC2) [0.0; x>=0]
  + omit since never used
* ScatteringOpacityC3 (ScatteringOpacityC3) [1.0; x>0] 
  + omit since never used
* ScatteringOpacityC4 (ScatteringOpacityC4) [0.0; x>=0]
  + omit since never used
* SuOlsonGreyEps (MarshakParms[0]) [none;]
  + leave in, but do not discuss in UserGuide
* NGammaDot (IonizationParms[0]) [0.0;]
* EtaRadius (IonizationParms[1]) [0.0; x>=0]
* EtaCenter (IonizationParms[2:5]) [0.0, 0.0, 0.0;]
